// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace bus_serialize {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace bus_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::bus_serialize::Bus* Arena::CreateMaybeMessage<::bus_serialize::Bus>(Arena*);
template<> ::bus_serialize::Distance* Arena::CreateMaybeMessage<::bus_serialize::Distance>(Arena*);
template<> ::bus_serialize::Stop* Arena::CreateMaybeMessage<::bus_serialize::Stop>(Arena*);
template<> ::bus_serialize::TransportCatalogue* Arena::CreateMaybeMessage<::bus_serialize::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bus_serialize {

// ===================================================================

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus_serialize.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus_serialize.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsIdFieldNumber = 2,
    kRouteFieldNumber = 1,
    kIsRoundtripFieldNumber = 3,
  };
  // repeated uint32 stops_id = 2;
  int stops_id_size() const;
  private:
  int _internal_stops_id_size() const;
  public:
  void clear_stops_id();
  private:
  uint32_t _internal_stops_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stops_id() const;
  void _internal_add_stops_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stops_id();
  public:
  uint32_t stops_id(int index) const;
  void set_stops_id(int index, uint32_t value);
  void add_stops_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stops_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stops_id();

  // string route = 1;
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_NODISCARD std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // bool is_roundtrip = 3;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bus_serialize.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stops_id_;
    mutable std::atomic<int> _stops_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus_serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus_serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
    kIdFieldNumber = 4,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 lat = 1;
  void clear_lat();
  uint32_t lat() const;
  void set_lat(uint32_t value);
  private:
  uint32_t _internal_lat() const;
  void _internal_set_lat(uint32_t value);
  public:

  // uint32 lng = 2;
  void clear_lng();
  uint32_t lng() const;
  void set_lng(uint32_t value);
  private:
  uint32_t _internal_lng() const;
  void _internal_set_lng(uint32_t value);
  public:

  // uint32 id = 4;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bus_serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t lat_;
    uint32_t lng_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus_serialize.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus_serialize.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kFromIdFieldNumber = 2,
    kToIdFieldNumber = 3,
  };
  // uint32 distance = 1;
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // uint32 from_id = 2;
  void clear_from_id();
  uint32_t from_id() const;
  void set_from_id(uint32_t value);
  private:
  uint32_t _internal_from_id() const;
  void _internal_set_from_id(uint32_t value);
  public:

  // uint32 to_id = 3;
  void clear_to_id();
  uint32_t to_id() const;
  void set_to_id(uint32_t value);
  private:
  uint32_t _internal_to_id() const;
  void _internal_set_to_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bus_serialize.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t distance_;
    uint32_t from_id_;
    uint32_t to_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bus_serialize.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bus_serialize.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kStopDistancesFieldNumber = 3,
  };
  // repeated .bus_serialize.Bus buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::bus_serialize::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Bus >*
      mutable_buses();
  private:
  const ::bus_serialize::Bus& _internal_buses(int index) const;
  ::bus_serialize::Bus* _internal_add_buses();
  public:
  const ::bus_serialize::Bus& buses(int index) const;
  ::bus_serialize::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Bus >&
      buses() const;

  // repeated .bus_serialize.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::bus_serialize::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Stop >*
      mutable_stops();
  private:
  const ::bus_serialize::Stop& _internal_stops(int index) const;
  ::bus_serialize::Stop* _internal_add_stops();
  public:
  const ::bus_serialize::Stop& stops(int index) const;
  ::bus_serialize::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Stop >&
      stops() const;

  // repeated .bus_serialize.Distance stop_distances = 3;
  int stop_distances_size() const;
  private:
  int _internal_stop_distances_size() const;
  public:
  void clear_stop_distances();
  ::bus_serialize::Distance* mutable_stop_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Distance >*
      mutable_stop_distances();
  private:
  const ::bus_serialize::Distance& _internal_stop_distances(int index) const;
  ::bus_serialize::Distance* _internal_add_stop_distances();
  public:
  const ::bus_serialize::Distance& stop_distances(int index) const;
  ::bus_serialize::Distance* add_stop_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Distance >&
      stop_distances() const;

  // @@protoc_insertion_point(class_scope:bus_serialize.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Distance > stop_distances_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bus

// string route = 1;
inline void Bus::clear_route() {
  _impl_.route_.ClearToEmpty();
}
inline const std::string& Bus::route() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Bus.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_route(ArgT0&& arg0, ArgT... args) {
 
 _impl_.route_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bus_serialize.Bus.route)
}
inline std::string* Bus::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:bus_serialize.Bus.route)
  return _s;
}
inline const std::string& Bus::_internal_route() const {
  return _impl_.route_.Get();
}
inline void Bus::_internal_set_route(const std::string& value) {
  
  _impl_.route_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_route() {
  
  return _impl_.route_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_route() {
  // @@protoc_insertion_point(field_release:bus_serialize.Bus.route)
  return _impl_.route_.Release();
}
inline void Bus::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  _impl_.route_.SetAllocated(route, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_.IsDefault()) {
    _impl_.route_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bus_serialize.Bus.route)
}

// repeated uint32 stops_id = 2;
inline int Bus::_internal_stops_id_size() const {
  return _impl_.stops_id_.size();
}
inline int Bus::stops_id_size() const {
  return _internal_stops_id_size();
}
inline void Bus::clear_stops_id() {
  _impl_.stops_id_.Clear();
}
inline uint32_t Bus::_internal_stops_id(int index) const {
  return _impl_.stops_id_.Get(index);
}
inline uint32_t Bus::stops_id(int index) const {
  // @@protoc_insertion_point(field_get:bus_serialize.Bus.stops_id)
  return _internal_stops_id(index);
}
inline void Bus::set_stops_id(int index, uint32_t value) {
  _impl_.stops_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bus_serialize.Bus.stops_id)
}
inline void Bus::_internal_add_stops_id(uint32_t value) {
  _impl_.stops_id_.Add(value);
}
inline void Bus::add_stops_id(uint32_t value) {
  _internal_add_stops_id(value);
  // @@protoc_insertion_point(field_add:bus_serialize.Bus.stops_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::_internal_stops_id() const {
  return _impl_.stops_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Bus::stops_id() const {
  // @@protoc_insertion_point(field_list:bus_serialize.Bus.stops_id)
  return _internal_stops_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::_internal_mutable_stops_id() {
  return &_impl_.stops_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Bus::mutable_stops_id() {
  // @@protoc_insertion_point(field_mutable_list:bus_serialize.Bus.stops_id)
  return _internal_mutable_stops_id();
}

// bool is_roundtrip = 3;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Bus.is_roundtrip)
}

// -------------------------------------------------------------------

// Stop

// uint32 lat = 1;
inline void Stop::clear_lat() {
  _impl_.lat_ = 0u;
}
inline uint32_t Stop::_internal_lat() const {
  return _impl_.lat_;
}
inline uint32_t Stop::lat() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Stop.lat)
  return _internal_lat();
}
inline void Stop::_internal_set_lat(uint32_t value) {
  
  _impl_.lat_ = value;
}
inline void Stop::set_lat(uint32_t value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Stop.lat)
}

// uint32 lng = 2;
inline void Stop::clear_lng() {
  _impl_.lng_ = 0u;
}
inline uint32_t Stop::_internal_lng() const {
  return _impl_.lng_;
}
inline uint32_t Stop::lng() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Stop.lng)
  return _internal_lng();
}
inline void Stop::_internal_set_lng(uint32_t value) {
  
  _impl_.lng_ = value;
}
inline void Stop::set_lng(uint32_t value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Stop.lng)
}

// string name = 3;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bus_serialize.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bus_serialize.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:bus_serialize.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bus_serialize.Stop.name)
}

// uint32 id = 4;
inline void Stop::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Stop.id)
}

// -------------------------------------------------------------------

// Distance

// uint32 distance = 1;
inline void Distance::clear_distance() {
  _impl_.distance_ = 0u;
}
inline uint32_t Distance::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t Distance::distance() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(uint32_t value) {
  
  _impl_.distance_ = value;
}
inline void Distance::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Distance.distance)
}

// uint32 from_id = 2;
inline void Distance::clear_from_id() {
  _impl_.from_id_ = 0u;
}
inline uint32_t Distance::_internal_from_id() const {
  return _impl_.from_id_;
}
inline uint32_t Distance::from_id() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Distance.from_id)
  return _internal_from_id();
}
inline void Distance::_internal_set_from_id(uint32_t value) {
  
  _impl_.from_id_ = value;
}
inline void Distance::set_from_id(uint32_t value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Distance.from_id)
}

// uint32 to_id = 3;
inline void Distance::clear_to_id() {
  _impl_.to_id_ = 0u;
}
inline uint32_t Distance::_internal_to_id() const {
  return _impl_.to_id_;
}
inline uint32_t Distance::to_id() const {
  // @@protoc_insertion_point(field_get:bus_serialize.Distance.to_id)
  return _internal_to_id();
}
inline void Distance::_internal_set_to_id(uint32_t value) {
  
  _impl_.to_id_ = value;
}
inline void Distance::set_to_id(uint32_t value) {
  _internal_set_to_id(value);
  // @@protoc_insertion_point(field_set:bus_serialize.Distance.to_id)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .bus_serialize.Bus buses = 1;
inline int TransportCatalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::bus_serialize::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:bus_serialize.TransportCatalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:bus_serialize.TransportCatalogue.buses)
  return &_impl_.buses_;
}
inline const ::bus_serialize::Bus& TransportCatalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::bus_serialize::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:bus_serialize.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::bus_serialize::Bus* TransportCatalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::bus_serialize::Bus* TransportCatalogue::add_buses() {
  ::bus_serialize::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:bus_serialize.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:bus_serialize.TransportCatalogue.buses)
  return _impl_.buses_;
}

// repeated .bus_serialize.Stop stops = 2;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::bus_serialize::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:bus_serialize.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:bus_serialize.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::bus_serialize::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::bus_serialize::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:bus_serialize.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::bus_serialize::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::bus_serialize::Stop* TransportCatalogue::add_stops() {
  ::bus_serialize::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:bus_serialize.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:bus_serialize.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .bus_serialize.Distance stop_distances = 3;
inline int TransportCatalogue::_internal_stop_distances_size() const {
  return _impl_.stop_distances_.size();
}
inline int TransportCatalogue::stop_distances_size() const {
  return _internal_stop_distances_size();
}
inline void TransportCatalogue::clear_stop_distances() {
  _impl_.stop_distances_.Clear();
}
inline ::bus_serialize::Distance* TransportCatalogue::mutable_stop_distances(int index) {
  // @@protoc_insertion_point(field_mutable:bus_serialize.TransportCatalogue.stop_distances)
  return _impl_.stop_distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Distance >*
TransportCatalogue::mutable_stop_distances() {
  // @@protoc_insertion_point(field_mutable_list:bus_serialize.TransportCatalogue.stop_distances)
  return &_impl_.stop_distances_;
}
inline const ::bus_serialize::Distance& TransportCatalogue::_internal_stop_distances(int index) const {
  return _impl_.stop_distances_.Get(index);
}
inline const ::bus_serialize::Distance& TransportCatalogue::stop_distances(int index) const {
  // @@protoc_insertion_point(field_get:bus_serialize.TransportCatalogue.stop_distances)
  return _internal_stop_distances(index);
}
inline ::bus_serialize::Distance* TransportCatalogue::_internal_add_stop_distances() {
  return _impl_.stop_distances_.Add();
}
inline ::bus_serialize::Distance* TransportCatalogue::add_stop_distances() {
  ::bus_serialize::Distance* _add = _internal_add_stop_distances();
  // @@protoc_insertion_point(field_add:bus_serialize.TransportCatalogue.stop_distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bus_serialize::Distance >&
TransportCatalogue::stop_distances() const {
  // @@protoc_insertion_point(field_list:bus_serialize.TransportCatalogue.stop_distances)
  return _impl_.stop_distances_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bus_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
