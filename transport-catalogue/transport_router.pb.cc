// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace router_serialize {
PROTOBUF_CONSTEXPR RouteSettings::RouteSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_wait_time_)*/0
  , /*decltype(_impl_.bus_velocity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteSettingsDefaultTypeInternal() {}
  union {
    RouteSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteSettingsDefaultTypeInternal _RouteSettings_default_instance_;
PROTOBUF_CONSTEXPR RouteWeight::RouteWeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.span_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteWeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteWeightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteWeightDefaultTypeInternal() {}
  union {
    RouteWeight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteWeightDefaultTypeInternal _RouteWeight_default_instance_;
PROTOBUF_CONSTEXPR Edge::Edge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_)*/nullptr
  , /*decltype(_impl_.vertex_id_from_)*/0u
  , /*decltype(_impl_.vertex_id_to_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeDefaultTypeInternal _Edge_default_instance_;
PROTOBUF_CONSTEXPR IncidenceList::IncidenceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edges_id_)*/{}
  , /*decltype(_impl_._edges_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidenceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidenceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidenceListDefaultTypeInternal() {}
  union {
    IncidenceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
PROTOBUF_CONSTEXPR EdgeOptional::EdgeOptional(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeOptionalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeOptionalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeOptionalDefaultTypeInternal() {}
  union {
    EdgeOptional _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeOptionalDefaultTypeInternal _EdgeOptional_default_instance_;
PROTOBUF_CONSTEXPR DirectedWeightedGraph::DirectedWeightedGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_.incidence_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectedWeightedGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectedWeightedGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectedWeightedGraphDefaultTypeInternal() {}
  union {
    DirectedWeightedGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectedWeightedGraphDefaultTypeInternal _DirectedWeightedGraph_default_instance_;
PROTOBUF_CONSTEXPR RouteInternalData::RouteInternalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_weight_)*/nullptr
  , /*decltype(_impl_.prev_edge_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteInternalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteInternalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteInternalDataDefaultTypeInternal() {}
  union {
    RouteInternalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
PROTOBUF_CONSTEXPR OptionalRouteInternalData::OptionalRouteInternalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionalRouteInternalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalRouteInternalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalRouteInternalDataDefaultTypeInternal() {}
  union {
    OptionalRouteInternalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalRouteInternalDataDefaultTypeInternal _OptionalRouteInternalData_default_instance_;
PROTOBUF_CONSTEXPR RoutesInternalData::RoutesInternalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_internal_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutesInternalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutesInternalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutesInternalDataDefaultTypeInternal() {}
  union {
    RoutesInternalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
PROTOBUF_CONSTEXPR TransportRouter::TransportRouter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settings_)*/nullptr
  , /*decltype(_impl_.graph_)*/nullptr
  , /*decltype(_impl_.router_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransportRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportRouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportRouterDefaultTypeInternal() {}
  union {
    TransportRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace router_serialize
static ::_pb::Metadata file_level_metadata_transport_5frouter_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const uint32_t TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteSettings, _impl_.bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteSettings, _impl_.bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteWeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteWeight, _impl_.bus_name_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteWeight, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteWeight, _impl_.span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::Edge, _impl_.vertex_id_from_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::Edge, _impl_.vertex_id_to_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::Edge, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::IncidenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::IncidenceList, _impl_.edges_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::EdgeOptional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::EdgeOptional, _impl_.edge_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::DirectedWeightedGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::DirectedWeightedGraph, _impl_.edges_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::DirectedWeightedGraph, _impl_.incidence_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteInternalData, _impl_.route_weight_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::RouteInternalData, _impl_.prev_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::OptionalRouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::OptionalRouteInternalData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RoutesInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::RoutesInternalData, _impl_.routes_internal_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::Router, _impl_.routes_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::router_serialize::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::router_serialize::TransportRouter, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::TransportRouter, _impl_.graph_),
  PROTOBUF_FIELD_OFFSET(::router_serialize::TransportRouter, _impl_.router_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::router_serialize::RouteSettings)},
  { 8, -1, -1, sizeof(::router_serialize::RouteWeight)},
  { 17, -1, -1, sizeof(::router_serialize::Edge)},
  { 26, -1, -1, sizeof(::router_serialize::IncidenceList)},
  { 33, -1, -1, sizeof(::router_serialize::EdgeOptional)},
  { 40, -1, -1, sizeof(::router_serialize::DirectedWeightedGraph)},
  { 48, -1, -1, sizeof(::router_serialize::RouteInternalData)},
  { 56, -1, -1, sizeof(::router_serialize::OptionalRouteInternalData)},
  { 63, -1, -1, sizeof(::router_serialize::RoutesInternalData)},
  { 70, -1, -1, sizeof(::router_serialize::Router)},
  { 77, -1, -1, sizeof(::router_serialize::TransportRouter)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::router_serialize::_RouteSettings_default_instance_._instance,
  &::router_serialize::_RouteWeight_default_instance_._instance,
  &::router_serialize::_Edge_default_instance_._instance,
  &::router_serialize::_IncidenceList_default_instance_._instance,
  &::router_serialize::_EdgeOptional_default_instance_._instance,
  &::router_serialize::_DirectedWeightedGraph_default_instance_._instance,
  &::router_serialize::_RouteInternalData_default_instance_._instance,
  &::router_serialize::_OptionalRouteInternalData_default_instance_._instance,
  &::router_serialize::_RoutesInternalData_default_instance_._instance,
  &::router_serialize::_Router_default_instance_._instance,
  &::router_serialize::_TransportRouter_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\020router_seriali"
  "ze\"<\n\rRouteSettings\022\025\n\rbus_wait_time\030\001 \001"
  "(\001\022\024\n\014bus_velocity\030\002 \001(\001\"C\n\013RouteWeight\022"
  "\020\n\010bus_name\030\001 \001(\t\022\016\n\006weight\030\002 \001(\001\022\022\n\nspa"
  "n_count\030\003 \001(\r\"c\n\004Edge\022\026\n\016vertex_id_from\030"
  "\001 \001(\r\022\024\n\014vertex_id_to\030\002 \001(\r\022-\n\006weight\030\003 "
  "\001(\0132\035.router_serialize.RouteWeight\"!\n\rIn"
  "cidenceList\022\020\n\010edges_id\030\001 \003(\r\"\037\n\014EdgeOpt"
  "ional\022\017\n\007edge_id\030\001 \001(\r\"w\n\025DirectedWeight"
  "edGraph\022%\n\005edges\030\001 \003(\0132\026.router_serializ"
  "e.Edge\0227\n\016incidence_list\030\002 \003(\0132\037.router_"
  "serialize.IncidenceList\"{\n\021RouteInternal"
  "Data\0223\n\014route_weight\030\001 \001(\0132\035.router_seri"
  "alize.RouteWeight\0221\n\tprev_edge\030\002 \001(\0132\036.r"
  "outer_serialize.EdgeOptional\"N\n\031Optional"
  "RouteInternalData\0221\n\004data\030\001 \001(\0132#.router"
  "_serialize.RouteInternalData\"_\n\022RoutesIn"
  "ternalData\022I\n\024routes_internal_data\030\001 \003(\013"
  "2+.router_serialize.OptionalRouteInterna"
  "lData\"C\n\006Router\0229\n\013routes_data\030\001 \003(\0132$.r"
  "outer_serialize.RoutesInternalData\"\246\001\n\017T"
  "ransportRouter\0221\n\010settings\030\001 \001(\0132\037.route"
  "r_serialize.RouteSettings\0226\n\005graph\030\002 \001(\013"
  "2\'.router_serialize.DirectedWeightedGrap"
  "h\022(\n\006router\030\003 \001(\0132\030.router_serialize.Rou"
  "terb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
    false, false, 1011, descriptor_table_protodef_transport_5frouter_2eproto,
    "transport_router.proto",
    &descriptor_table_transport_5frouter_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
    file_level_metadata_transport_5frouter_2eproto, file_level_enum_descriptors_transport_5frouter_2eproto,
    file_level_service_descriptors_transport_5frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5frouter_2eproto_getter() {
  return &descriptor_table_transport_5frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5frouter_2eproto(&descriptor_table_transport_5frouter_2eproto);
namespace router_serialize {

// ===================================================================

class RouteSettings::_Internal {
 public:
};

RouteSettings::RouteSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.RouteSettings)
}
RouteSettings::RouteSettings(const RouteSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_wait_time_){}
    , decltype(_impl_.bus_velocity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_wait_time_, &from._impl_.bus_wait_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_velocity_) -
    reinterpret_cast<char*>(&_impl_.bus_wait_time_)) + sizeof(_impl_.bus_velocity_));
  // @@protoc_insertion_point(copy_constructor:router_serialize.RouteSettings)
}

inline void RouteSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_wait_time_){0}
    , decltype(_impl_.bus_velocity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteSettings::~RouteSettings() {
  // @@protoc_insertion_point(destructor:router_serialize.RouteSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.RouteSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_velocity_) -
      reinterpret_cast<char*>(&_impl_.bus_wait_time_)) + sizeof(_impl_.bus_velocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.RouteSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double bus_wait_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.RouteSettings)
  return target;
}

size_t RouteSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.RouteSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_wait_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    total_size += 1 + 8;
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteSettings::GetClassData() const { return &_class_data_; }


void RouteSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteSettings*>(&to_msg);
  auto& from = static_cast<const RouteSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.RouteSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = from._internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    _this->_internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _this->_internal_set_bus_velocity(from._internal_bus_velocity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteSettings::CopyFrom(const RouteSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.RouteSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteSettings::IsInitialized() const {
  return true;
}

void RouteSettings::InternalSwap(RouteSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteSettings, _impl_.bus_velocity_)
      + sizeof(RouteSettings::_impl_.bus_velocity_)
      - PROTOBUF_FIELD_OFFSET(RouteSettings, _impl_.bus_wait_time_)>(
          reinterpret_cast<char*>(&_impl_.bus_wait_time_),
          reinterpret_cast<char*>(&other->_impl_.bus_wait_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[0]);
}

// ===================================================================

class RouteWeight::_Internal {
 public:
};

RouteWeight::RouteWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.RouteWeight)
}
RouteWeight::RouteWeight(const RouteWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteWeight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.span_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_name().empty()) {
    _this->_impl_.bus_name_.Set(from._internal_bus_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.span_count_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.span_count_));
  // @@protoc_insertion_point(copy_constructor:router_serialize.RouteWeight)
}

inline void RouteWeight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.span_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RouteWeight::~RouteWeight() {
  // @@protoc_insertion_point(destructor:router_serialize.RouteWeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteWeight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bus_name_.Destroy();
}

void RouteWeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.RouteWeight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bus_name_.ClearToEmpty();
  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.span_count_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteWeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bus_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "router_serialize.RouteWeight.bus_name"));
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 span_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteWeight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.RouteWeight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus_name = 1;
  if (!this->_internal_bus_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "router_serialize.RouteWeight.bus_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bus_name(), target);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // uint32 span_count = 3;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_span_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.RouteWeight)
  return target;
}

size_t RouteWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.RouteWeight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 1;
  if (!this->_internal_bus_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // uint32 span_count = 3;
  if (this->_internal_span_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_span_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteWeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteWeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteWeight::GetClassData() const { return &_class_data_; }


void RouteWeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteWeight*>(&to_msg);
  auto& from = static_cast<const RouteWeight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.RouteWeight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bus_name().empty()) {
    _this->_internal_set_bus_name(from._internal_bus_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_span_count() != 0) {
    _this->_internal_set_span_count(from._internal_span_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteWeight::CopyFrom(const RouteWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.RouteWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteWeight::IsInitialized() const {
  return true;
}

void RouteWeight::InternalSwap(RouteWeight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bus_name_, lhs_arena,
      &other->_impl_.bus_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteWeight, _impl_.span_count_)
      + sizeof(RouteWeight::_impl_.span_count_)
      - PROTOBUF_FIELD_OFFSET(RouteWeight, _impl_.weight_)>(
          reinterpret_cast<char*>(&_impl_.weight_),
          reinterpret_cast<char*>(&other->_impl_.weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteWeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[1]);
}

// ===================================================================

class Edge::_Internal {
 public:
  static const ::router_serialize::RouteWeight& weight(const Edge* msg);
};

const ::router_serialize::RouteWeight&
Edge::_Internal::weight(const Edge* msg) {
  return *msg->_impl_.weight_;
}
Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Edge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){nullptr}
    , decltype(_impl_.vertex_id_from_){}
    , decltype(_impl_.vertex_id_to_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weight()) {
    _this->_impl_.weight_ = new ::router_serialize::RouteWeight(*from._impl_.weight_);
  }
  ::memcpy(&_impl_.vertex_id_from_, &from._impl_.vertex_id_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vertex_id_to_) -
    reinterpret_cast<char*>(&_impl_.vertex_id_from_)) + sizeof(_impl_.vertex_id_to_));
  // @@protoc_insertion_point(copy_constructor:router_serialize.Edge)
}

inline void Edge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){nullptr}
    , decltype(_impl_.vertex_id_from_){0u}
    , decltype(_impl_.vertex_id_to_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:router_serialize.Edge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weight_;
}

void Edge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.Edge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.weight_ != nullptr) {
    delete _impl_.weight_;
  }
  _impl_.weight_ = nullptr;
  ::memset(&_impl_.vertex_id_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vertex_id_to_) -
      reinterpret_cast<char*>(&_impl_.vertex_id_from_)) + sizeof(_impl_.vertex_id_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 vertex_id_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_id_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 vertex_id_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vertex_id_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .router_serialize.RouteWeight weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_weight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Edge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.Edge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertex_id_from = 1;
  if (this->_internal_vertex_id_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vertex_id_from(), target);
  }

  // uint32 vertex_id_to = 2;
  if (this->_internal_vertex_id_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vertex_id_to(), target);
  }

  // .router_serialize.RouteWeight weight = 3;
  if (this->_internal_has_weight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::weight(this),
        _Internal::weight(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.Edge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .router_serialize.RouteWeight weight = 3;
  if (this->_internal_has_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weight_);
  }

  // uint32 vertex_id_from = 1;
  if (this->_internal_vertex_id_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_id_from());
  }

  // uint32 vertex_id_to = 2;
  if (this->_internal_vertex_id_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_id_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Edge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Edge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Edge::GetClassData() const { return &_class_data_; }


void Edge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Edge*>(&to_msg);
  auto& from = static_cast<const Edge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.Edge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_weight()) {
    _this->_internal_mutable_weight()->::router_serialize::RouteWeight::MergeFrom(
        from._internal_weight());
  }
  if (from._internal_vertex_id_from() != 0) {
    _this->_internal_set_vertex_id_from(from._internal_vertex_id_from());
  }
  if (from._internal_vertex_id_to() != 0) {
    _this->_internal_set_vertex_id_to(from._internal_vertex_id_to());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, _impl_.vertex_id_to_)
      + sizeof(Edge::_impl_.vertex_id_to_)
      - PROTOBUF_FIELD_OFFSET(Edge, _impl_.weight_)>(
          reinterpret_cast<char*>(&_impl_.weight_),
          reinterpret_cast<char*>(&other->_impl_.weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[2]);
}

// ===================================================================

class IncidenceList::_Internal {
 public:
};

IncidenceList::IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.IncidenceList)
}
IncidenceList::IncidenceList(const IncidenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidenceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_id_){from._impl_.edges_id_}
    , /*decltype(_impl_._edges_id_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:router_serialize.IncidenceList)
}

inline void IncidenceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_id_){arena}
    , /*decltype(_impl_._edges_id_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncidenceList::~IncidenceList() {
  // @@protoc_insertion_point(destructor:router_serialize.IncidenceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_id_.~RepeatedField();
}

void IncidenceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.IncidenceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidenceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 edges_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edges_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_edges_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidenceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.IncidenceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 edges_id = 1;
  {
    int byte_size = _impl_._edges_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_edges_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.IncidenceList)
  return target;
}

size_t IncidenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.IncidenceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 edges_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.edges_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._edges_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidenceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidenceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidenceList::GetClassData() const { return &_class_data_; }


void IncidenceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidenceList*>(&to_msg);
  auto& from = static_cast<const IncidenceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.IncidenceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_id_.MergeFrom(from._impl_.edges_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidenceList::CopyFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceList::IsInitialized() const {
  return true;
}

void IncidenceList::InternalSwap(IncidenceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edges_id_.InternalSwap(&other->_impl_.edges_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[3]);
}

// ===================================================================

class EdgeOptional::_Internal {
 public:
};

EdgeOptional::EdgeOptional(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.EdgeOptional)
}
EdgeOptional::EdgeOptional(const EdgeOptional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgeOptional* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.edge_id_ = from._impl_.edge_id_;
  // @@protoc_insertion_point(copy_constructor:router_serialize.EdgeOptional)
}

inline void EdgeOptional::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgeOptional::~EdgeOptional() {
  // @@protoc_insertion_point(destructor:router_serialize.EdgeOptional)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgeOptional::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgeOptional::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgeOptional::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.EdgeOptional)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeOptional::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 edge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.edge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeOptional::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.EdgeOptional)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 edge_id = 1;
  if (this->_internal_edge_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.EdgeOptional)
  return target;
}

size_t EdgeOptional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.EdgeOptional)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 edge_id = 1;
  if (this->_internal_edge_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_edge_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeOptional::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgeOptional::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeOptional::GetClassData() const { return &_class_data_; }


void EdgeOptional::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgeOptional*>(&to_msg);
  auto& from = static_cast<const EdgeOptional&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.EdgeOptional)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_edge_id() != 0) {
    _this->_internal_set_edge_id(from._internal_edge_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeOptional::CopyFrom(const EdgeOptional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.EdgeOptional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeOptional::IsInitialized() const {
  return true;
}

void EdgeOptional::InternalSwap(EdgeOptional* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.edge_id_, other->_impl_.edge_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeOptional::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[4]);
}

// ===================================================================

class DirectedWeightedGraph::_Internal {
 public:
};

DirectedWeightedGraph::DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.DirectedWeightedGraph)
}
DirectedWeightedGraph::DirectedWeightedGraph(const DirectedWeightedGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectedWeightedGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){from._impl_.edges_}
    , decltype(_impl_.incidence_list_){from._impl_.incidence_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:router_serialize.DirectedWeightedGraph)
}

inline void DirectedWeightedGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){arena}
    , decltype(_impl_.incidence_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DirectedWeightedGraph::~DirectedWeightedGraph() {
  // @@protoc_insertion_point(destructor:router_serialize.DirectedWeightedGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectedWeightedGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_.~RepeatedPtrField();
  _impl_.incidence_list_.~RepeatedPtrField();
}

void DirectedWeightedGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectedWeightedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.DirectedWeightedGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_.Clear();
  _impl_.incidence_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectedWeightedGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .router_serialize.Edge edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .router_serialize.IncidenceList incidence_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incidence_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectedWeightedGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.DirectedWeightedGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .router_serialize.Edge edges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .router_serialize.IncidenceList incidence_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incidence_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_incidence_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.DirectedWeightedGraph)
  return target;
}

size_t DirectedWeightedGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.DirectedWeightedGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router_serialize.Edge edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .router_serialize.IncidenceList incidence_list = 2;
  total_size += 1UL * this->_internal_incidence_list_size();
  for (const auto& msg : this->_impl_.incidence_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectedWeightedGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectedWeightedGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectedWeightedGraph::GetClassData() const { return &_class_data_; }


void DirectedWeightedGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectedWeightedGraph*>(&to_msg);
  auto& from = static_cast<const DirectedWeightedGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.DirectedWeightedGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_impl_.incidence_list_.MergeFrom(from._impl_.incidence_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectedWeightedGraph::CopyFrom(const DirectedWeightedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.DirectedWeightedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectedWeightedGraph::IsInitialized() const {
  return true;
}

void DirectedWeightedGraph::InternalSwap(DirectedWeightedGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  _impl_.incidence_list_.InternalSwap(&other->_impl_.incidence_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectedWeightedGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[5]);
}

// ===================================================================

class RouteInternalData::_Internal {
 public:
  static const ::router_serialize::RouteWeight& route_weight(const RouteInternalData* msg);
  static const ::router_serialize::EdgeOptional& prev_edge(const RouteInternalData* msg);
};

const ::router_serialize::RouteWeight&
RouteInternalData::_Internal::route_weight(const RouteInternalData* msg) {
  return *msg->_impl_.route_weight_;
}
const ::router_serialize::EdgeOptional&
RouteInternalData::_Internal::prev_edge(const RouteInternalData* msg) {
  return *msg->_impl_.prev_edge_;
}
RouteInternalData::RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.RouteInternalData)
}
RouteInternalData::RouteInternalData(const RouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteInternalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_weight_){nullptr}
    , decltype(_impl_.prev_edge_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_route_weight()) {
    _this->_impl_.route_weight_ = new ::router_serialize::RouteWeight(*from._impl_.route_weight_);
  }
  if (from._internal_has_prev_edge()) {
    _this->_impl_.prev_edge_ = new ::router_serialize::EdgeOptional(*from._impl_.prev_edge_);
  }
  // @@protoc_insertion_point(copy_constructor:router_serialize.RouteInternalData)
}

inline void RouteInternalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_weight_){nullptr}
    , decltype(_impl_.prev_edge_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteInternalData::~RouteInternalData() {
  // @@protoc_insertion_point(destructor:router_serialize.RouteInternalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.route_weight_;
  if (this != internal_default_instance()) delete _impl_.prev_edge_;
}

void RouteInternalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.RouteInternalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.route_weight_ != nullptr) {
    delete _impl_.route_weight_;
  }
  _impl_.route_weight_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.prev_edge_ != nullptr) {
    delete _impl_.prev_edge_;
  }
  _impl_.prev_edge_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInternalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .router_serialize.RouteWeight route_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_weight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .router_serialize.EdgeOptional prev_edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_edge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteInternalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.RouteInternalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .router_serialize.RouteWeight route_weight = 1;
  if (this->_internal_has_route_weight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::route_weight(this),
        _Internal::route_weight(this).GetCachedSize(), target, stream);
  }

  // .router_serialize.EdgeOptional prev_edge = 2;
  if (this->_internal_has_prev_edge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::prev_edge(this),
        _Internal::prev_edge(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.RouteInternalData)
  return target;
}

size_t RouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.RouteInternalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .router_serialize.RouteWeight route_weight = 1;
  if (this->_internal_has_route_weight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.route_weight_);
  }

  // .router_serialize.EdgeOptional prev_edge = 2;
  if (this->_internal_has_prev_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_edge_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteInternalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteInternalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteInternalData::GetClassData() const { return &_class_data_; }


void RouteInternalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteInternalData*>(&to_msg);
  auto& from = static_cast<const RouteInternalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_route_weight()) {
    _this->_internal_mutable_route_weight()->::router_serialize::RouteWeight::MergeFrom(
        from._internal_route_weight());
  }
  if (from._internal_has_prev_edge()) {
    _this->_internal_mutable_prev_edge()->::router_serialize::EdgeOptional::MergeFrom(
        from._internal_prev_edge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteInternalData::CopyFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInternalData::IsInitialized() const {
  return true;
}

void RouteInternalData::InternalSwap(RouteInternalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInternalData, _impl_.prev_edge_)
      + sizeof(RouteInternalData::_impl_.prev_edge_)
      - PROTOBUF_FIELD_OFFSET(RouteInternalData, _impl_.route_weight_)>(
          reinterpret_cast<char*>(&_impl_.route_weight_),
          reinterpret_cast<char*>(&other->_impl_.route_weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInternalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[6]);
}

// ===================================================================

class OptionalRouteInternalData::_Internal {
 public:
  static const ::router_serialize::RouteInternalData& data(const OptionalRouteInternalData* msg);
};

const ::router_serialize::RouteInternalData&
OptionalRouteInternalData::_Internal::data(const OptionalRouteInternalData* msg) {
  return *msg->_impl_.data_;
}
OptionalRouteInternalData::OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.OptionalRouteInternalData)
}
OptionalRouteInternalData::OptionalRouteInternalData(const OptionalRouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionalRouteInternalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::router_serialize::RouteInternalData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:router_serialize.OptionalRouteInternalData)
}

inline void OptionalRouteInternalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionalRouteInternalData::~OptionalRouteInternalData() {
  // @@protoc_insertion_point(destructor:router_serialize.OptionalRouteInternalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionalRouteInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void OptionalRouteInternalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionalRouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.OptionalRouteInternalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalRouteInternalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .router_serialize.RouteInternalData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionalRouteInternalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.OptionalRouteInternalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .router_serialize.RouteInternalData data = 1;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.OptionalRouteInternalData)
  return target;
}

size_t OptionalRouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.OptionalRouteInternalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .router_serialize.RouteInternalData data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalRouteInternalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionalRouteInternalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalRouteInternalData::GetClassData() const { return &_class_data_; }


void OptionalRouteInternalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionalRouteInternalData*>(&to_msg);
  auto& from = static_cast<const OptionalRouteInternalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.OptionalRouteInternalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::router_serialize::RouteInternalData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalRouteInternalData::CopyFrom(const OptionalRouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.OptionalRouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalRouteInternalData::IsInitialized() const {
  return true;
}

void OptionalRouteInternalData::InternalSwap(OptionalRouteInternalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalRouteInternalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[7]);
}

// ===================================================================

class RoutesInternalData::_Internal {
 public:
};

RoutesInternalData::RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.RoutesInternalData)
}
RoutesInternalData::RoutesInternalData(const RoutesInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutesInternalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_internal_data_){from._impl_.routes_internal_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:router_serialize.RoutesInternalData)
}

inline void RoutesInternalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_internal_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutesInternalData::~RoutesInternalData() {
  // @@protoc_insertion_point(destructor:router_serialize.RoutesInternalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutesInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_internal_data_.~RepeatedPtrField();
}

void RoutesInternalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutesInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.RoutesInternalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_internal_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesInternalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .router_serialize.OptionalRouteInternalData routes_internal_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes_internal_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutesInternalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.RoutesInternalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .router_serialize.OptionalRouteInternalData routes_internal_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.RoutesInternalData)
  return target;
}

size_t RoutesInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.RoutesInternalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router_serialize.OptionalRouteInternalData routes_internal_data = 1;
  total_size += 1UL * this->_internal_routes_internal_data_size();
  for (const auto& msg : this->_impl_.routes_internal_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutesInternalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutesInternalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutesInternalData::GetClassData() const { return &_class_data_; }


void RoutesInternalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutesInternalData*>(&to_msg);
  auto& from = static_cast<const RoutesInternalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.RoutesInternalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_internal_data_.MergeFrom(from._impl_.routes_internal_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutesInternalData::CopyFrom(const RoutesInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.RoutesInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesInternalData::IsInitialized() const {
  return true;
}

void RoutesInternalData::InternalSwap(RoutesInternalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_internal_data_.InternalSwap(&other->_impl_.routes_internal_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesInternalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[8]);
}

// ===================================================================

class Router::_Internal {
 public:
};

Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Router* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_data_){from._impl_.routes_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:router_serialize.Router)
}

inline void Router::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:router_serialize.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_data_.~RepeatedPtrField();
}

void Router::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .router_serialize.RoutesInternalData routes_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .router_serialize.RoutesInternalData routes_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .router_serialize.RoutesInternalData routes_data = 1;
  total_size += 1UL * this->_internal_routes_data_size();
  for (const auto& msg : this->_impl_.routes_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Router::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Router::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Router::GetClassData() const { return &_class_data_; }


void Router::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Router*>(&to_msg);
  auto& from = static_cast<const Router&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.Router)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_data_.MergeFrom(from._impl_.routes_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_data_.InternalSwap(&other->_impl_.routes_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[9]);
}

// ===================================================================

class TransportRouter::_Internal {
 public:
  static const ::router_serialize::RouteSettings& settings(const TransportRouter* msg);
  static const ::router_serialize::DirectedWeightedGraph& graph(const TransportRouter* msg);
  static const ::router_serialize::Router& router(const TransportRouter* msg);
};

const ::router_serialize::RouteSettings&
TransportRouter::_Internal::settings(const TransportRouter* msg) {
  return *msg->_impl_.settings_;
}
const ::router_serialize::DirectedWeightedGraph&
TransportRouter::_Internal::graph(const TransportRouter* msg) {
  return *msg->_impl_.graph_;
}
const ::router_serialize::Router&
TransportRouter::_Internal::router(const TransportRouter* msg) {
  return *msg->_impl_.router_;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:router_serialize.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportRouter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){nullptr}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings()) {
    _this->_impl_.settings_ = new ::router_serialize::RouteSettings(*from._impl_.settings_);
  }
  if (from._internal_has_graph()) {
    _this->_impl_.graph_ = new ::router_serialize::DirectedWeightedGraph(*from._impl_.graph_);
  }
  if (from._internal_has_router()) {
    _this->_impl_.router_ = new ::router_serialize::Router(*from._impl_.router_);
  }
  // @@protoc_insertion_point(copy_constructor:router_serialize.TransportRouter)
}

inline void TransportRouter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){nullptr}
    , decltype(_impl_.graph_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:router_serialize.TransportRouter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.settings_;
  if (this != internal_default_instance()) delete _impl_.graph_;
  if (this != internal_default_instance()) delete _impl_.router_;
}

void TransportRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:router_serialize.TransportRouter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .router_serialize.RouteSettings settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .router_serialize.DirectedWeightedGraph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .router_serialize.Router router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportRouter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:router_serialize.TransportRouter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .router_serialize.RouteSettings settings = 1;
  if (this->_internal_has_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::settings(this),
        _Internal::settings(this).GetCachedSize(), target, stream);
  }

  // .router_serialize.DirectedWeightedGraph graph = 2;
  if (this->_internal_has_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  // .router_serialize.Router router = 3;
  if (this->_internal_has_router()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::router(this),
        _Internal::router(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:router_serialize.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:router_serialize.TransportRouter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .router_serialize.RouteSettings settings = 1;
  if (this->_internal_has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settings_);
  }

  // .router_serialize.DirectedWeightedGraph graph = 2;
  if (this->_internal_has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_);
  }

  // .router_serialize.Router router = 3;
  if (this->_internal_has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.router_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportRouter::GetClassData() const { return &_class_data_; }


void TransportRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportRouter*>(&to_msg);
  auto& from = static_cast<const TransportRouter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:router_serialize.TransportRouter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_settings()) {
    _this->_internal_mutable_settings()->::router_serialize::RouteSettings::MergeFrom(
        from._internal_settings());
  }
  if (from._internal_has_graph()) {
    _this->_internal_mutable_graph()->::router_serialize::DirectedWeightedGraph::MergeFrom(
        from._internal_graph());
  }
  if (from._internal_has_router()) {
    _this->_internal_mutable_router()->::router_serialize::Router::MergeFrom(
        from._internal_router());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:router_serialize.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, _impl_.router_)
      + sizeof(TransportRouter::_impl_.router_)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, _impl_.settings_)>(
          reinterpret_cast<char*>(&_impl_.settings_),
          reinterpret_cast<char*>(&other->_impl_.settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace router_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::router_serialize::RouteSettings*
Arena::CreateMaybeMessage< ::router_serialize::RouteSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::RouteSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::RouteWeight*
Arena::CreateMaybeMessage< ::router_serialize::RouteWeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::RouteWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::Edge*
Arena::CreateMaybeMessage< ::router_serialize::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::IncidenceList*
Arena::CreateMaybeMessage< ::router_serialize::IncidenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::IncidenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::EdgeOptional*
Arena::CreateMaybeMessage< ::router_serialize::EdgeOptional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::EdgeOptional >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::DirectedWeightedGraph*
Arena::CreateMaybeMessage< ::router_serialize::DirectedWeightedGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::DirectedWeightedGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::RouteInternalData*
Arena::CreateMaybeMessage< ::router_serialize::RouteInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::RouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::OptionalRouteInternalData*
Arena::CreateMaybeMessage< ::router_serialize::OptionalRouteInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::OptionalRouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::RoutesInternalData*
Arena::CreateMaybeMessage< ::router_serialize::RoutesInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::RoutesInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::Router*
Arena::CreateMaybeMessage< ::router_serialize::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::router_serialize::TransportRouter*
Arena::CreateMaybeMessage< ::router_serialize::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::router_serialize::TransportRouter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
