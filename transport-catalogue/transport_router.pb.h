// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace router_serialize {
class DirectedWeightedGraph;
struct DirectedWeightedGraphDefaultTypeInternal;
extern DirectedWeightedGraphDefaultTypeInternal _DirectedWeightedGraph_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeOptional;
struct EdgeOptionalDefaultTypeInternal;
extern EdgeOptionalDefaultTypeInternal _EdgeOptional_default_instance_;
class IncidenceList;
struct IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class OptionalRouteInternalData;
struct OptionalRouteInternalDataDefaultTypeInternal;
extern OptionalRouteInternalDataDefaultTypeInternal _OptionalRouteInternalData_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class RouteSettings;
struct RouteSettingsDefaultTypeInternal;
extern RouteSettingsDefaultTypeInternal _RouteSettings_default_instance_;
class RouteWeight;
struct RouteWeightDefaultTypeInternal;
extern RouteWeightDefaultTypeInternal _RouteWeight_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesInternalData;
struct RoutesInternalDataDefaultTypeInternal;
extern RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace router_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::router_serialize::DirectedWeightedGraph* Arena::CreateMaybeMessage<::router_serialize::DirectedWeightedGraph>(Arena*);
template<> ::router_serialize::Edge* Arena::CreateMaybeMessage<::router_serialize::Edge>(Arena*);
template<> ::router_serialize::EdgeOptional* Arena::CreateMaybeMessage<::router_serialize::EdgeOptional>(Arena*);
template<> ::router_serialize::IncidenceList* Arena::CreateMaybeMessage<::router_serialize::IncidenceList>(Arena*);
template<> ::router_serialize::OptionalRouteInternalData* Arena::CreateMaybeMessage<::router_serialize::OptionalRouteInternalData>(Arena*);
template<> ::router_serialize::RouteInternalData* Arena::CreateMaybeMessage<::router_serialize::RouteInternalData>(Arena*);
template<> ::router_serialize::RouteSettings* Arena::CreateMaybeMessage<::router_serialize::RouteSettings>(Arena*);
template<> ::router_serialize::RouteWeight* Arena::CreateMaybeMessage<::router_serialize::RouteWeight>(Arena*);
template<> ::router_serialize::Router* Arena::CreateMaybeMessage<::router_serialize::Router>(Arena*);
template<> ::router_serialize::RoutesInternalData* Arena::CreateMaybeMessage<::router_serialize::RoutesInternalData>(Arena*);
template<> ::router_serialize::TransportRouter* Arena::CreateMaybeMessage<::router_serialize::TransportRouter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace router_serialize {

// ===================================================================

class RouteSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.RouteSettings) */ {
 public:
  inline RouteSettings() : RouteSettings(nullptr) {}
  ~RouteSettings() override;
  explicit PROTOBUF_CONSTEXPR RouteSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteSettings(const RouteSettings& from);
  RouteSettings(RouteSettings&& from) noexcept
    : RouteSettings() {
    *this = ::std::move(from);
  }

  inline RouteSettings& operator=(const RouteSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSettings& operator=(RouteSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteSettings* internal_default_instance() {
    return reinterpret_cast<const RouteSettings*>(
               &_RouteSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteSettings& a, RouteSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteSettings& from) {
    RouteSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.RouteSettings";
  }
  protected:
  explicit RouteSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // double bus_wait_time = 1;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:router_serialize.RouteSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_wait_time_;
    double bus_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteWeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.RouteWeight) */ {
 public:
  inline RouteWeight() : RouteWeight(nullptr) {}
  ~RouteWeight() override;
  explicit PROTOBUF_CONSTEXPR RouteWeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteWeight(const RouteWeight& from);
  RouteWeight(RouteWeight&& from) noexcept
    : RouteWeight() {
    *this = ::std::move(from);
  }

  inline RouteWeight& operator=(const RouteWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteWeight& operator=(RouteWeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteWeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteWeight* internal_default_instance() {
    return reinterpret_cast<const RouteWeight*>(
               &_RouteWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RouteWeight& a, RouteWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteWeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteWeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteWeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteWeight& from) {
    RouteWeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteWeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.RouteWeight";
  }
  protected:
  explicit RouteWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kWeightFieldNumber = 2,
    kSpanCountFieldNumber = 3,
  };
  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // uint32 span_count = 3;
  void clear_span_count();
  uint32_t span_count() const;
  void set_span_count(uint32_t value);
  private:
  uint32_t _internal_span_count() const;
  void _internal_set_span_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router_serialize.RouteWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
    double weight_;
    uint32_t span_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 3,
    kVertexIdFromFieldNumber = 1,
    kVertexIdToFieldNumber = 2,
  };
  // .router_serialize.RouteWeight weight = 3;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::router_serialize::RouteWeight& weight() const;
  PROTOBUF_NODISCARD ::router_serialize::RouteWeight* release_weight();
  ::router_serialize::RouteWeight* mutable_weight();
  void set_allocated_weight(::router_serialize::RouteWeight* weight);
  private:
  const ::router_serialize::RouteWeight& _internal_weight() const;
  ::router_serialize::RouteWeight* _internal_mutable_weight();
  public:
  void unsafe_arena_set_allocated_weight(
      ::router_serialize::RouteWeight* weight);
  ::router_serialize::RouteWeight* unsafe_arena_release_weight();

  // uint32 vertex_id_from = 1;
  void clear_vertex_id_from();
  uint32_t vertex_id_from() const;
  void set_vertex_id_from(uint32_t value);
  private:
  uint32_t _internal_vertex_id_from() const;
  void _internal_set_vertex_id_from(uint32_t value);
  public:

  // uint32 vertex_id_to = 2;
  void clear_vertex_id_to();
  uint32_t vertex_id_to() const;
  void set_vertex_id_to(uint32_t value);
  private:
  uint32_t _internal_vertex_id_to() const;
  void _internal_set_vertex_id_to(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router_serialize.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::router_serialize::RouteWeight* weight_;
    uint32_t vertex_id_from_;
    uint32_t vertex_id_to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  ~IncidenceList() override;
  explicit PROTOBUF_CONSTEXPR IncidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IncidenceList& from) {
    IncidenceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesIdFieldNumber = 1,
  };
  // repeated uint32 edges_id = 1;
  int edges_id_size() const;
  private:
  int _internal_edges_id_size() const;
  public:
  void clear_edges_id();
  private:
  uint32_t _internal_edges_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_edges_id() const;
  void _internal_add_edges_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_edges_id();
  public:
  uint32_t edges_id(int index) const;
  void set_edges_id(int index, uint32_t value);
  void add_edges_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      edges_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_edges_id();

  // @@protoc_insertion_point(class_scope:router_serialize.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > edges_id_;
    mutable std::atomic<int> _edges_id_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeOptional final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.EdgeOptional) */ {
 public:
  inline EdgeOptional() : EdgeOptional(nullptr) {}
  ~EdgeOptional() override;
  explicit PROTOBUF_CONSTEXPR EdgeOptional(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeOptional(const EdgeOptional& from);
  EdgeOptional(EdgeOptional&& from) noexcept
    : EdgeOptional() {
    *this = ::std::move(from);
  }

  inline EdgeOptional& operator=(const EdgeOptional& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeOptional& operator=(EdgeOptional&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeOptional& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeOptional* internal_default_instance() {
    return reinterpret_cast<const EdgeOptional*>(
               &_EdgeOptional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdgeOptional& a, EdgeOptional& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeOptional* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeOptional* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeOptional* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeOptional>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeOptional& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeOptional& from) {
    EdgeOptional::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeOptional* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.EdgeOptional";
  }
  protected:
  explicit EdgeOptional(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdFieldNumber = 1,
  };
  // uint32 edge_id = 1;
  void clear_edge_id();
  uint32_t edge_id() const;
  void set_edge_id(uint32_t value);
  private:
  uint32_t _internal_edge_id() const;
  void _internal_set_edge_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:router_serialize.EdgeOptional)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t edge_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class DirectedWeightedGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.DirectedWeightedGraph) */ {
 public:
  inline DirectedWeightedGraph() : DirectedWeightedGraph(nullptr) {}
  ~DirectedWeightedGraph() override;
  explicit PROTOBUF_CONSTEXPR DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectedWeightedGraph(const DirectedWeightedGraph& from);
  DirectedWeightedGraph(DirectedWeightedGraph&& from) noexcept
    : DirectedWeightedGraph() {
    *this = ::std::move(from);
  }

  inline DirectedWeightedGraph& operator=(const DirectedWeightedGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectedWeightedGraph& operator=(DirectedWeightedGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectedWeightedGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectedWeightedGraph* internal_default_instance() {
    return reinterpret_cast<const DirectedWeightedGraph*>(
               &_DirectedWeightedGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DirectedWeightedGraph& a, DirectedWeightedGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectedWeightedGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectedWeightedGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectedWeightedGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectedWeightedGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectedWeightedGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirectedWeightedGraph& from) {
    DirectedWeightedGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectedWeightedGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.DirectedWeightedGraph";
  }
  protected:
  explicit DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListFieldNumber = 2,
  };
  // repeated .router_serialize.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::router_serialize::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::Edge >*
      mutable_edges();
  private:
  const ::router_serialize::Edge& _internal_edges(int index) const;
  ::router_serialize::Edge* _internal_add_edges();
  public:
  const ::router_serialize::Edge& edges(int index) const;
  ::router_serialize::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::Edge >&
      edges() const;

  // repeated .router_serialize.IncidenceList incidence_list = 2;
  int incidence_list_size() const;
  private:
  int _internal_incidence_list_size() const;
  public:
  void clear_incidence_list();
  ::router_serialize::IncidenceList* mutable_incidence_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::IncidenceList >*
      mutable_incidence_list();
  private:
  const ::router_serialize::IncidenceList& _internal_incidence_list(int index) const;
  ::router_serialize::IncidenceList* _internal_add_incidence_list();
  public:
  const ::router_serialize::IncidenceList& incidence_list(int index) const;
  ::router_serialize::IncidenceList* add_incidence_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::IncidenceList >&
      incidence_list() const;

  // @@protoc_insertion_point(class_scope:router_serialize.DirectedWeightedGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::IncidenceList > incidence_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  ~RouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteInternalData& from) {
    RouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteWeightFieldNumber = 1,
    kPrevEdgeFieldNumber = 2,
  };
  // .router_serialize.RouteWeight route_weight = 1;
  bool has_route_weight() const;
  private:
  bool _internal_has_route_weight() const;
  public:
  void clear_route_weight();
  const ::router_serialize::RouteWeight& route_weight() const;
  PROTOBUF_NODISCARD ::router_serialize::RouteWeight* release_route_weight();
  ::router_serialize::RouteWeight* mutable_route_weight();
  void set_allocated_route_weight(::router_serialize::RouteWeight* route_weight);
  private:
  const ::router_serialize::RouteWeight& _internal_route_weight() const;
  ::router_serialize::RouteWeight* _internal_mutable_route_weight();
  public:
  void unsafe_arena_set_allocated_route_weight(
      ::router_serialize::RouteWeight* route_weight);
  ::router_serialize::RouteWeight* unsafe_arena_release_route_weight();

  // .router_serialize.EdgeOptional prev_edge = 2;
  bool has_prev_edge() const;
  private:
  bool _internal_has_prev_edge() const;
  public:
  void clear_prev_edge();
  const ::router_serialize::EdgeOptional& prev_edge() const;
  PROTOBUF_NODISCARD ::router_serialize::EdgeOptional* release_prev_edge();
  ::router_serialize::EdgeOptional* mutable_prev_edge();
  void set_allocated_prev_edge(::router_serialize::EdgeOptional* prev_edge);
  private:
  const ::router_serialize::EdgeOptional& _internal_prev_edge() const;
  ::router_serialize::EdgeOptional* _internal_mutable_prev_edge();
  public:
  void unsafe_arena_set_allocated_prev_edge(
      ::router_serialize::EdgeOptional* prev_edge);
  ::router_serialize::EdgeOptional* unsafe_arena_release_prev_edge();

  // @@protoc_insertion_point(class_scope:router_serialize.RouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::router_serialize::RouteWeight* route_weight_;
    ::router_serialize::EdgeOptional* prev_edge_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class OptionalRouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.OptionalRouteInternalData) */ {
 public:
  inline OptionalRouteInternalData() : OptionalRouteInternalData(nullptr) {}
  ~OptionalRouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionalRouteInternalData(const OptionalRouteInternalData& from);
  OptionalRouteInternalData(OptionalRouteInternalData&& from) noexcept
    : OptionalRouteInternalData() {
    *this = ::std::move(from);
  }

  inline OptionalRouteInternalData& operator=(const OptionalRouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalRouteInternalData& operator=(OptionalRouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalRouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalRouteInternalData* internal_default_instance() {
    return reinterpret_cast<const OptionalRouteInternalData*>(
               &_OptionalRouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OptionalRouteInternalData& a, OptionalRouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalRouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalRouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalRouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalRouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionalRouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionalRouteInternalData& from) {
    OptionalRouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalRouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.OptionalRouteInternalData";
  }
  protected:
  explicit OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .router_serialize.RouteInternalData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::router_serialize::RouteInternalData& data() const;
  PROTOBUF_NODISCARD ::router_serialize::RouteInternalData* release_data();
  ::router_serialize::RouteInternalData* mutable_data();
  void set_allocated_data(::router_serialize::RouteInternalData* data);
  private:
  const ::router_serialize::RouteInternalData& _internal_data() const;
  ::router_serialize::RouteInternalData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::router_serialize::RouteInternalData* data);
  ::router_serialize::RouteInternalData* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:router_serialize.OptionalRouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::router_serialize::RouteInternalData* data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.RoutesInternalData) */ {
 public:
  inline RoutesInternalData() : RoutesInternalData(nullptr) {}
  ~RoutesInternalData() override;
  explicit PROTOBUF_CONSTEXPR RoutesInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalData(const RoutesInternalData& from);
  RoutesInternalData(RoutesInternalData&& from) noexcept
    : RoutesInternalData() {
    *this = ::std::move(from);
  }

  inline RoutesInternalData& operator=(const RoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalData& operator=(RoutesInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalData*>(
               &_RoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoutesInternalData& a, RoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutesInternalData& from) {
    RoutesInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.RoutesInternalData";
  }
  protected:
  explicit RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 1,
  };
  // repeated .router_serialize.OptionalRouteInternalData routes_internal_data = 1;
  int routes_internal_data_size() const;
  private:
  int _internal_routes_internal_data_size() const;
  public:
  void clear_routes_internal_data();
  ::router_serialize::OptionalRouteInternalData* mutable_routes_internal_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::OptionalRouteInternalData >*
      mutable_routes_internal_data();
  private:
  const ::router_serialize::OptionalRouteInternalData& _internal_routes_internal_data(int index) const;
  ::router_serialize::OptionalRouteInternalData* _internal_add_routes_internal_data();
  public:
  const ::router_serialize::OptionalRouteInternalData& routes_internal_data(int index) const;
  ::router_serialize::OptionalRouteInternalData* add_routes_internal_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::OptionalRouteInternalData >&
      routes_internal_data() const;

  // @@protoc_insertion_point(class_scope:router_serialize.RoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::OptionalRouteInternalData > routes_internal_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit PROTOBUF_CONSTEXPR Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Router& from) {
    Router::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesDataFieldNumber = 1,
  };
  // repeated .router_serialize.RoutesInternalData routes_data = 1;
  int routes_data_size() const;
  private:
  int _internal_routes_data_size() const;
  public:
  void clear_routes_data();
  ::router_serialize::RoutesInternalData* mutable_routes_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::RoutesInternalData >*
      mutable_routes_data();
  private:
  const ::router_serialize::RoutesInternalData& _internal_routes_data(int index) const;
  ::router_serialize::RoutesInternalData* _internal_add_routes_data();
  public:
  const ::router_serialize::RoutesInternalData& routes_data(int index) const;
  ::router_serialize::RoutesInternalData* add_routes_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::RoutesInternalData >&
      routes_data() const;

  // @@protoc_insertion_point(class_scope:router_serialize.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::RoutesInternalData > routes_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:router_serialize.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit PROTOBUF_CONSTEXPR TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportRouter& from) {
    TransportRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "router_serialize.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // .router_serialize.RouteSettings settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::router_serialize::RouteSettings& settings() const;
  PROTOBUF_NODISCARD ::router_serialize::RouteSettings* release_settings();
  ::router_serialize::RouteSettings* mutable_settings();
  void set_allocated_settings(::router_serialize::RouteSettings* settings);
  private:
  const ::router_serialize::RouteSettings& _internal_settings() const;
  ::router_serialize::RouteSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::router_serialize::RouteSettings* settings);
  ::router_serialize::RouteSettings* unsafe_arena_release_settings();

  // .router_serialize.DirectedWeightedGraph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::router_serialize::DirectedWeightedGraph& graph() const;
  PROTOBUF_NODISCARD ::router_serialize::DirectedWeightedGraph* release_graph();
  ::router_serialize::DirectedWeightedGraph* mutable_graph();
  void set_allocated_graph(::router_serialize::DirectedWeightedGraph* graph);
  private:
  const ::router_serialize::DirectedWeightedGraph& _internal_graph() const;
  ::router_serialize::DirectedWeightedGraph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::router_serialize::DirectedWeightedGraph* graph);
  ::router_serialize::DirectedWeightedGraph* unsafe_arena_release_graph();

  // .router_serialize.Router router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::router_serialize::Router& router() const;
  PROTOBUF_NODISCARD ::router_serialize::Router* release_router();
  ::router_serialize::Router* mutable_router();
  void set_allocated_router(::router_serialize::Router* router);
  private:
  const ::router_serialize::Router& _internal_router() const;
  ::router_serialize::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::router_serialize::Router* router);
  ::router_serialize::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:router_serialize.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::router_serialize::RouteSettings* settings_;
    ::router_serialize::DirectedWeightedGraph* graph_;
    ::router_serialize::Router* router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteSettings

// double bus_wait_time = 1;
inline void RouteSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double RouteSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double RouteSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RouteSettings::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RouteSettings::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:router_serialize.RouteSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RouteSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RouteSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RouteSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RouteSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RouteSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:router_serialize.RouteSettings.bus_velocity)
}

// -------------------------------------------------------------------

// RouteWeight

// string bus_name = 1;
inline void RouteWeight::clear_bus_name() {
  _impl_.bus_name_.ClearToEmpty();
}
inline const std::string& RouteWeight::bus_name() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteWeight.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteWeight::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:router_serialize.RouteWeight.bus_name)
}
inline std::string* RouteWeight::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:router_serialize.RouteWeight.bus_name)
  return _s;
}
inline const std::string& RouteWeight::_internal_bus_name() const {
  return _impl_.bus_name_.Get();
}
inline void RouteWeight::_internal_set_bus_name(const std::string& value) {
  
  _impl_.bus_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteWeight::_internal_mutable_bus_name() {
  
  return _impl_.bus_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteWeight::release_bus_name() {
  // @@protoc_insertion_point(field_release:router_serialize.RouteWeight.bus_name)
  return _impl_.bus_name_.Release();
}
inline void RouteWeight::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  _impl_.bus_name_.SetAllocated(bus_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_name_.IsDefault()) {
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:router_serialize.RouteWeight.bus_name)
}

// double weight = 2;
inline void RouteWeight::clear_weight() {
  _impl_.weight_ = 0;
}
inline double RouteWeight::_internal_weight() const {
  return _impl_.weight_;
}
inline double RouteWeight::weight() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteWeight.weight)
  return _internal_weight();
}
inline void RouteWeight::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void RouteWeight::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:router_serialize.RouteWeight.weight)
}

// uint32 span_count = 3;
inline void RouteWeight::clear_span_count() {
  _impl_.span_count_ = 0u;
}
inline uint32_t RouteWeight::_internal_span_count() const {
  return _impl_.span_count_;
}
inline uint32_t RouteWeight::span_count() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteWeight.span_count)
  return _internal_span_count();
}
inline void RouteWeight::_internal_set_span_count(uint32_t value) {
  
  _impl_.span_count_ = value;
}
inline void RouteWeight::set_span_count(uint32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:router_serialize.RouteWeight.span_count)
}

// -------------------------------------------------------------------

// Edge

// uint32 vertex_id_from = 1;
inline void Edge::clear_vertex_id_from() {
  _impl_.vertex_id_from_ = 0u;
}
inline uint32_t Edge::_internal_vertex_id_from() const {
  return _impl_.vertex_id_from_;
}
inline uint32_t Edge::vertex_id_from() const {
  // @@protoc_insertion_point(field_get:router_serialize.Edge.vertex_id_from)
  return _internal_vertex_id_from();
}
inline void Edge::_internal_set_vertex_id_from(uint32_t value) {
  
  _impl_.vertex_id_from_ = value;
}
inline void Edge::set_vertex_id_from(uint32_t value) {
  _internal_set_vertex_id_from(value);
  // @@protoc_insertion_point(field_set:router_serialize.Edge.vertex_id_from)
}

// uint32 vertex_id_to = 2;
inline void Edge::clear_vertex_id_to() {
  _impl_.vertex_id_to_ = 0u;
}
inline uint32_t Edge::_internal_vertex_id_to() const {
  return _impl_.vertex_id_to_;
}
inline uint32_t Edge::vertex_id_to() const {
  // @@protoc_insertion_point(field_get:router_serialize.Edge.vertex_id_to)
  return _internal_vertex_id_to();
}
inline void Edge::_internal_set_vertex_id_to(uint32_t value) {
  
  _impl_.vertex_id_to_ = value;
}
inline void Edge::set_vertex_id_to(uint32_t value) {
  _internal_set_vertex_id_to(value);
  // @@protoc_insertion_point(field_set:router_serialize.Edge.vertex_id_to)
}

// .router_serialize.RouteWeight weight = 3;
inline bool Edge::_internal_has_weight() const {
  return this != internal_default_instance() && _impl_.weight_ != nullptr;
}
inline bool Edge::has_weight() const {
  return _internal_has_weight();
}
inline void Edge::clear_weight() {
  if (GetArenaForAllocation() == nullptr && _impl_.weight_ != nullptr) {
    delete _impl_.weight_;
  }
  _impl_.weight_ = nullptr;
}
inline const ::router_serialize::RouteWeight& Edge::_internal_weight() const {
  const ::router_serialize::RouteWeight* p = _impl_.weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::RouteWeight&>(
      ::router_serialize::_RouteWeight_default_instance_);
}
inline const ::router_serialize::RouteWeight& Edge::weight() const {
  // @@protoc_insertion_point(field_get:router_serialize.Edge.weight)
  return _internal_weight();
}
inline void Edge::unsafe_arena_set_allocated_weight(
    ::router_serialize::RouteWeight* weight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_);
  }
  _impl_.weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.Edge.weight)
}
inline ::router_serialize::RouteWeight* Edge::release_weight() {
  
  ::router_serialize::RouteWeight* temp = _impl_.weight_;
  _impl_.weight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::RouteWeight* Edge::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_release:router_serialize.Edge.weight)
  
  ::router_serialize::RouteWeight* temp = _impl_.weight_;
  _impl_.weight_ = nullptr;
  return temp;
}
inline ::router_serialize::RouteWeight* Edge::_internal_mutable_weight() {
  
  if (_impl_.weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::RouteWeight>(GetArenaForAllocation());
    _impl_.weight_ = p;
  }
  return _impl_.weight_;
}
inline ::router_serialize::RouteWeight* Edge::mutable_weight() {
  ::router_serialize::RouteWeight* _msg = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:router_serialize.Edge.weight)
  return _msg;
}
inline void Edge::set_allocated_weight(::router_serialize::RouteWeight* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_;
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight);
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.Edge.weight)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 edges_id = 1;
inline int IncidenceList::_internal_edges_id_size() const {
  return _impl_.edges_id_.size();
}
inline int IncidenceList::edges_id_size() const {
  return _internal_edges_id_size();
}
inline void IncidenceList::clear_edges_id() {
  _impl_.edges_id_.Clear();
}
inline uint32_t IncidenceList::_internal_edges_id(int index) const {
  return _impl_.edges_id_.Get(index);
}
inline uint32_t IncidenceList::edges_id(int index) const {
  // @@protoc_insertion_point(field_get:router_serialize.IncidenceList.edges_id)
  return _internal_edges_id(index);
}
inline void IncidenceList::set_edges_id(int index, uint32_t value) {
  _impl_.edges_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:router_serialize.IncidenceList.edges_id)
}
inline void IncidenceList::_internal_add_edges_id(uint32_t value) {
  _impl_.edges_id_.Add(value);
}
inline void IncidenceList::add_edges_id(uint32_t value) {
  _internal_add_edges_id(value);
  // @@protoc_insertion_point(field_add:router_serialize.IncidenceList.edges_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::_internal_edges_id() const {
  return _impl_.edges_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::edges_id() const {
  // @@protoc_insertion_point(field_list:router_serialize.IncidenceList.edges_id)
  return _internal_edges_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::_internal_mutable_edges_id() {
  return &_impl_.edges_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::mutable_edges_id() {
  // @@protoc_insertion_point(field_mutable_list:router_serialize.IncidenceList.edges_id)
  return _internal_mutable_edges_id();
}

// -------------------------------------------------------------------

// EdgeOptional

// uint32 edge_id = 1;
inline void EdgeOptional::clear_edge_id() {
  _impl_.edge_id_ = 0u;
}
inline uint32_t EdgeOptional::_internal_edge_id() const {
  return _impl_.edge_id_;
}
inline uint32_t EdgeOptional::edge_id() const {
  // @@protoc_insertion_point(field_get:router_serialize.EdgeOptional.edge_id)
  return _internal_edge_id();
}
inline void EdgeOptional::_internal_set_edge_id(uint32_t value) {
  
  _impl_.edge_id_ = value;
}
inline void EdgeOptional::set_edge_id(uint32_t value) {
  _internal_set_edge_id(value);
  // @@protoc_insertion_point(field_set:router_serialize.EdgeOptional.edge_id)
}

// -------------------------------------------------------------------

// DirectedWeightedGraph

// repeated .router_serialize.Edge edges = 1;
inline int DirectedWeightedGraph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int DirectedWeightedGraph::edges_size() const {
  return _internal_edges_size();
}
inline void DirectedWeightedGraph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::router_serialize::Edge* DirectedWeightedGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:router_serialize.DirectedWeightedGraph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::Edge >*
DirectedWeightedGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:router_serialize.DirectedWeightedGraph.edges)
  return &_impl_.edges_;
}
inline const ::router_serialize::Edge& DirectedWeightedGraph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::router_serialize::Edge& DirectedWeightedGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:router_serialize.DirectedWeightedGraph.edges)
  return _internal_edges(index);
}
inline ::router_serialize::Edge* DirectedWeightedGraph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::router_serialize::Edge* DirectedWeightedGraph::add_edges() {
  ::router_serialize::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:router_serialize.DirectedWeightedGraph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::Edge >&
DirectedWeightedGraph::edges() const {
  // @@protoc_insertion_point(field_list:router_serialize.DirectedWeightedGraph.edges)
  return _impl_.edges_;
}

// repeated .router_serialize.IncidenceList incidence_list = 2;
inline int DirectedWeightedGraph::_internal_incidence_list_size() const {
  return _impl_.incidence_list_.size();
}
inline int DirectedWeightedGraph::incidence_list_size() const {
  return _internal_incidence_list_size();
}
inline void DirectedWeightedGraph::clear_incidence_list() {
  _impl_.incidence_list_.Clear();
}
inline ::router_serialize::IncidenceList* DirectedWeightedGraph::mutable_incidence_list(int index) {
  // @@protoc_insertion_point(field_mutable:router_serialize.DirectedWeightedGraph.incidence_list)
  return _impl_.incidence_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::IncidenceList >*
DirectedWeightedGraph::mutable_incidence_list() {
  // @@protoc_insertion_point(field_mutable_list:router_serialize.DirectedWeightedGraph.incidence_list)
  return &_impl_.incidence_list_;
}
inline const ::router_serialize::IncidenceList& DirectedWeightedGraph::_internal_incidence_list(int index) const {
  return _impl_.incidence_list_.Get(index);
}
inline const ::router_serialize::IncidenceList& DirectedWeightedGraph::incidence_list(int index) const {
  // @@protoc_insertion_point(field_get:router_serialize.DirectedWeightedGraph.incidence_list)
  return _internal_incidence_list(index);
}
inline ::router_serialize::IncidenceList* DirectedWeightedGraph::_internal_add_incidence_list() {
  return _impl_.incidence_list_.Add();
}
inline ::router_serialize::IncidenceList* DirectedWeightedGraph::add_incidence_list() {
  ::router_serialize::IncidenceList* _add = _internal_add_incidence_list();
  // @@protoc_insertion_point(field_add:router_serialize.DirectedWeightedGraph.incidence_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::IncidenceList >&
DirectedWeightedGraph::incidence_list() const {
  // @@protoc_insertion_point(field_list:router_serialize.DirectedWeightedGraph.incidence_list)
  return _impl_.incidence_list_;
}

// -------------------------------------------------------------------

// RouteInternalData

// .router_serialize.RouteWeight route_weight = 1;
inline bool RouteInternalData::_internal_has_route_weight() const {
  return this != internal_default_instance() && _impl_.route_weight_ != nullptr;
}
inline bool RouteInternalData::has_route_weight() const {
  return _internal_has_route_weight();
}
inline void RouteInternalData::clear_route_weight() {
  if (GetArenaForAllocation() == nullptr && _impl_.route_weight_ != nullptr) {
    delete _impl_.route_weight_;
  }
  _impl_.route_weight_ = nullptr;
}
inline const ::router_serialize::RouteWeight& RouteInternalData::_internal_route_weight() const {
  const ::router_serialize::RouteWeight* p = _impl_.route_weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::RouteWeight&>(
      ::router_serialize::_RouteWeight_default_instance_);
}
inline const ::router_serialize::RouteWeight& RouteInternalData::route_weight() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteInternalData.route_weight)
  return _internal_route_weight();
}
inline void RouteInternalData::unsafe_arena_set_allocated_route_weight(
    ::router_serialize::RouteWeight* route_weight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_weight_);
  }
  _impl_.route_weight_ = route_weight;
  if (route_weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.RouteInternalData.route_weight)
}
inline ::router_serialize::RouteWeight* RouteInternalData::release_route_weight() {
  
  ::router_serialize::RouteWeight* temp = _impl_.route_weight_;
  _impl_.route_weight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::RouteWeight* RouteInternalData::unsafe_arena_release_route_weight() {
  // @@protoc_insertion_point(field_release:router_serialize.RouteInternalData.route_weight)
  
  ::router_serialize::RouteWeight* temp = _impl_.route_weight_;
  _impl_.route_weight_ = nullptr;
  return temp;
}
inline ::router_serialize::RouteWeight* RouteInternalData::_internal_mutable_route_weight() {
  
  if (_impl_.route_weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::RouteWeight>(GetArenaForAllocation());
    _impl_.route_weight_ = p;
  }
  return _impl_.route_weight_;
}
inline ::router_serialize::RouteWeight* RouteInternalData::mutable_route_weight() {
  ::router_serialize::RouteWeight* _msg = _internal_mutable_route_weight();
  // @@protoc_insertion_point(field_mutable:router_serialize.RouteInternalData.route_weight)
  return _msg;
}
inline void RouteInternalData::set_allocated_route_weight(::router_serialize::RouteWeight* route_weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.route_weight_;
  }
  if (route_weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(route_weight);
    if (message_arena != submessage_arena) {
      route_weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_weight, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.route_weight_ = route_weight;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.RouteInternalData.route_weight)
}

// .router_serialize.EdgeOptional prev_edge = 2;
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return this != internal_default_instance() && _impl_.prev_edge_ != nullptr;
}
inline bool RouteInternalData::has_prev_edge() const {
  return _internal_has_prev_edge();
}
inline void RouteInternalData::clear_prev_edge() {
  if (GetArenaForAllocation() == nullptr && _impl_.prev_edge_ != nullptr) {
    delete _impl_.prev_edge_;
  }
  _impl_.prev_edge_ = nullptr;
}
inline const ::router_serialize::EdgeOptional& RouteInternalData::_internal_prev_edge() const {
  const ::router_serialize::EdgeOptional* p = _impl_.prev_edge_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::EdgeOptional&>(
      ::router_serialize::_EdgeOptional_default_instance_);
}
inline const ::router_serialize::EdgeOptional& RouteInternalData::prev_edge() const {
  // @@protoc_insertion_point(field_get:router_serialize.RouteInternalData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteInternalData::unsafe_arena_set_allocated_prev_edge(
    ::router_serialize::EdgeOptional* prev_edge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_edge_);
  }
  _impl_.prev_edge_ = prev_edge;
  if (prev_edge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.RouteInternalData.prev_edge)
}
inline ::router_serialize::EdgeOptional* RouteInternalData::release_prev_edge() {
  
  ::router_serialize::EdgeOptional* temp = _impl_.prev_edge_;
  _impl_.prev_edge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::EdgeOptional* RouteInternalData::unsafe_arena_release_prev_edge() {
  // @@protoc_insertion_point(field_release:router_serialize.RouteInternalData.prev_edge)
  
  ::router_serialize::EdgeOptional* temp = _impl_.prev_edge_;
  _impl_.prev_edge_ = nullptr;
  return temp;
}
inline ::router_serialize::EdgeOptional* RouteInternalData::_internal_mutable_prev_edge() {
  
  if (_impl_.prev_edge_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::EdgeOptional>(GetArenaForAllocation());
    _impl_.prev_edge_ = p;
  }
  return _impl_.prev_edge_;
}
inline ::router_serialize::EdgeOptional* RouteInternalData::mutable_prev_edge() {
  ::router_serialize::EdgeOptional* _msg = _internal_mutable_prev_edge();
  // @@protoc_insertion_point(field_mutable:router_serialize.RouteInternalData.prev_edge)
  return _msg;
}
inline void RouteInternalData::set_allocated_prev_edge(::router_serialize::EdgeOptional* prev_edge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prev_edge_;
  }
  if (prev_edge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prev_edge);
    if (message_arena != submessage_arena) {
      prev_edge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_edge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.prev_edge_ = prev_edge;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.RouteInternalData.prev_edge)
}

// -------------------------------------------------------------------

// OptionalRouteInternalData

// .router_serialize.RouteInternalData data = 1;
inline bool OptionalRouteInternalData::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool OptionalRouteInternalData::has_data() const {
  return _internal_has_data();
}
inline void OptionalRouteInternalData::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::router_serialize::RouteInternalData& OptionalRouteInternalData::_internal_data() const {
  const ::router_serialize::RouteInternalData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::RouteInternalData&>(
      ::router_serialize::_RouteInternalData_default_instance_);
}
inline const ::router_serialize::RouteInternalData& OptionalRouteInternalData::data() const {
  // @@protoc_insertion_point(field_get:router_serialize.OptionalRouteInternalData.data)
  return _internal_data();
}
inline void OptionalRouteInternalData::unsafe_arena_set_allocated_data(
    ::router_serialize::RouteInternalData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.OptionalRouteInternalData.data)
}
inline ::router_serialize::RouteInternalData* OptionalRouteInternalData::release_data() {
  
  ::router_serialize::RouteInternalData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::RouteInternalData* OptionalRouteInternalData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:router_serialize.OptionalRouteInternalData.data)
  
  ::router_serialize::RouteInternalData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::router_serialize::RouteInternalData* OptionalRouteInternalData::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::RouteInternalData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::router_serialize::RouteInternalData* OptionalRouteInternalData::mutable_data() {
  ::router_serialize::RouteInternalData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:router_serialize.OptionalRouteInternalData.data)
  return _msg;
}
inline void OptionalRouteInternalData::set_allocated_data(::router_serialize::RouteInternalData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.OptionalRouteInternalData.data)
}

// -------------------------------------------------------------------

// RoutesInternalData

// repeated .router_serialize.OptionalRouteInternalData routes_internal_data = 1;
inline int RoutesInternalData::_internal_routes_internal_data_size() const {
  return _impl_.routes_internal_data_.size();
}
inline int RoutesInternalData::routes_internal_data_size() const {
  return _internal_routes_internal_data_size();
}
inline void RoutesInternalData::clear_routes_internal_data() {
  _impl_.routes_internal_data_.Clear();
}
inline ::router_serialize::OptionalRouteInternalData* RoutesInternalData::mutable_routes_internal_data(int index) {
  // @@protoc_insertion_point(field_mutable:router_serialize.RoutesInternalData.routes_internal_data)
  return _impl_.routes_internal_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::OptionalRouteInternalData >*
RoutesInternalData::mutable_routes_internal_data() {
  // @@protoc_insertion_point(field_mutable_list:router_serialize.RoutesInternalData.routes_internal_data)
  return &_impl_.routes_internal_data_;
}
inline const ::router_serialize::OptionalRouteInternalData& RoutesInternalData::_internal_routes_internal_data(int index) const {
  return _impl_.routes_internal_data_.Get(index);
}
inline const ::router_serialize::OptionalRouteInternalData& RoutesInternalData::routes_internal_data(int index) const {
  // @@protoc_insertion_point(field_get:router_serialize.RoutesInternalData.routes_internal_data)
  return _internal_routes_internal_data(index);
}
inline ::router_serialize::OptionalRouteInternalData* RoutesInternalData::_internal_add_routes_internal_data() {
  return _impl_.routes_internal_data_.Add();
}
inline ::router_serialize::OptionalRouteInternalData* RoutesInternalData::add_routes_internal_data() {
  ::router_serialize::OptionalRouteInternalData* _add = _internal_add_routes_internal_data();
  // @@protoc_insertion_point(field_add:router_serialize.RoutesInternalData.routes_internal_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::OptionalRouteInternalData >&
RoutesInternalData::routes_internal_data() const {
  // @@protoc_insertion_point(field_list:router_serialize.RoutesInternalData.routes_internal_data)
  return _impl_.routes_internal_data_;
}

// -------------------------------------------------------------------

// Router

// repeated .router_serialize.RoutesInternalData routes_data = 1;
inline int Router::_internal_routes_data_size() const {
  return _impl_.routes_data_.size();
}
inline int Router::routes_data_size() const {
  return _internal_routes_data_size();
}
inline void Router::clear_routes_data() {
  _impl_.routes_data_.Clear();
}
inline ::router_serialize::RoutesInternalData* Router::mutable_routes_data(int index) {
  // @@protoc_insertion_point(field_mutable:router_serialize.Router.routes_data)
  return _impl_.routes_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::RoutesInternalData >*
Router::mutable_routes_data() {
  // @@protoc_insertion_point(field_mutable_list:router_serialize.Router.routes_data)
  return &_impl_.routes_data_;
}
inline const ::router_serialize::RoutesInternalData& Router::_internal_routes_data(int index) const {
  return _impl_.routes_data_.Get(index);
}
inline const ::router_serialize::RoutesInternalData& Router::routes_data(int index) const {
  // @@protoc_insertion_point(field_get:router_serialize.Router.routes_data)
  return _internal_routes_data(index);
}
inline ::router_serialize::RoutesInternalData* Router::_internal_add_routes_data() {
  return _impl_.routes_data_.Add();
}
inline ::router_serialize::RoutesInternalData* Router::add_routes_data() {
  ::router_serialize::RoutesInternalData* _add = _internal_add_routes_data();
  // @@protoc_insertion_point(field_add:router_serialize.Router.routes_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::router_serialize::RoutesInternalData >&
Router::routes_data() const {
  // @@protoc_insertion_point(field_list:router_serialize.Router.routes_data)
  return _impl_.routes_data_;
}

// -------------------------------------------------------------------

// TransportRouter

// .router_serialize.RouteSettings settings = 1;
inline bool TransportRouter::_internal_has_settings() const {
  return this != internal_default_instance() && _impl_.settings_ != nullptr;
}
inline bool TransportRouter::has_settings() const {
  return _internal_has_settings();
}
inline void TransportRouter::clear_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
}
inline const ::router_serialize::RouteSettings& TransportRouter::_internal_settings() const {
  const ::router_serialize::RouteSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::RouteSettings&>(
      ::router_serialize::_RouteSettings_default_instance_);
}
inline const ::router_serialize::RouteSettings& TransportRouter::settings() const {
  // @@protoc_insertion_point(field_get:router_serialize.TransportRouter.settings)
  return _internal_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_settings(
    ::router_serialize::RouteSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.TransportRouter.settings)
}
inline ::router_serialize::RouteSettings* TransportRouter::release_settings() {
  
  ::router_serialize::RouteSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::RouteSettings* TransportRouter::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:router_serialize.TransportRouter.settings)
  
  ::router_serialize::RouteSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::router_serialize::RouteSettings* TransportRouter::_internal_mutable_settings() {
  
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::RouteSettings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::router_serialize::RouteSettings* TransportRouter::mutable_settings() {
  ::router_serialize::RouteSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:router_serialize.TransportRouter.settings)
  return _msg;
}
inline void TransportRouter::set_allocated_settings(::router_serialize::RouteSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.TransportRouter.settings)
}

// .router_serialize.DirectedWeightedGraph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline void TransportRouter::clear_graph() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_ != nullptr) {
    delete _impl_.graph_;
  }
  _impl_.graph_ = nullptr;
}
inline const ::router_serialize::DirectedWeightedGraph& TransportRouter::_internal_graph() const {
  const ::router_serialize::DirectedWeightedGraph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::DirectedWeightedGraph&>(
      ::router_serialize::_DirectedWeightedGraph_default_instance_);
}
inline const ::router_serialize::DirectedWeightedGraph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:router_serialize.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::router_serialize::DirectedWeightedGraph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.TransportRouter.graph)
}
inline ::router_serialize::DirectedWeightedGraph* TransportRouter::release_graph() {
  
  ::router_serialize::DirectedWeightedGraph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::DirectedWeightedGraph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:router_serialize.TransportRouter.graph)
  
  ::router_serialize::DirectedWeightedGraph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::router_serialize::DirectedWeightedGraph* TransportRouter::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::DirectedWeightedGraph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::router_serialize::DirectedWeightedGraph* TransportRouter::mutable_graph() {
  ::router_serialize::DirectedWeightedGraph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:router_serialize.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::router_serialize::DirectedWeightedGraph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.TransportRouter.graph)
}

// .router_serialize.Router router = 3;
inline bool TransportRouter::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool TransportRouter::has_router() const {
  return _internal_has_router();
}
inline void TransportRouter::clear_router() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
}
inline const ::router_serialize::Router& TransportRouter::_internal_router() const {
  const ::router_serialize::Router* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::router_serialize::Router&>(
      ::router_serialize::_Router_default_instance_);
}
inline const ::router_serialize::Router& TransportRouter::router() const {
  // @@protoc_insertion_point(field_get:router_serialize.TransportRouter.router)
  return _internal_router();
}
inline void TransportRouter::unsafe_arena_set_allocated_router(
    ::router_serialize::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:router_serialize.TransportRouter.router)
}
inline ::router_serialize::Router* TransportRouter::release_router() {
  
  ::router_serialize::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::router_serialize::Router* TransportRouter::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:router_serialize.TransportRouter.router)
  
  ::router_serialize::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::router_serialize::Router* TransportRouter::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::router_serialize::Router>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::router_serialize::Router* TransportRouter::mutable_router() {
  ::router_serialize::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:router_serialize.TransportRouter.router)
  return _msg;
}
inline void TransportRouter::set_allocated_router(::router_serialize::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.router_;
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(router);
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:router_serialize.TransportRouter.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
